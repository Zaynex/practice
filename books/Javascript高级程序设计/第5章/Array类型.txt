对象是某个特定引用类型的实例。新对象是使用new操作符后跟一个构造函数来创建的。
```
var person = new Obejct()；
```
这段代码创建了Object引用类型的实例，然后把该实例保存在变量person中。使用的构造函数是Obejct,它只为新对象定义了默认的属性和方法。
ECMAScript提供了很多原生引用类型(如Obejct)，供开发人员使用。

## Object类型
我们看到的大多数引用类型值都是Object类型的实例。虽然Obejct的实例不具备多少功能，但对于在应用程序中存储和传输数据，是理想的选择方式。

### 创建Object方式
1. 使用new操作符后跟Obejct构造函数
```
var person = new Obejct();
person.name = "Zaynex";
person.age = 22;
```
2. 对象字面量表示法
```
var person = {
	name: "Zaynex",
	age: 22
	//不能在age后面加,号
};
```
使用对象字面量表示法，属性名也可以是字符串。
使用数组字面量表示法时，不会调用Array构造函数。
```
var person = {
	"name": "Zaynex",
	"age": 22,
	5: true;
	//不能在5后面加,号
};
```
这里5的数值属性会被转换为字符串。

也可以使用
```
var person = {}; // 与 new Object()相同
person.name = "Zaynex";
person.age = 22;
```

访问对象属性的两种方式：
1. alert(person.name);
2. alert(person["name"]);

第2种方式的好处是可以通过变量访问属性

var propertyName = "name";
alert(person[propertyName]);

如果属性名中包含会导致语法错误的字符或者是属性名使用了关键字或保留字，也可以使用方括号表示法。
person["first name"]= "Zaynex";
这种形式使用点表示法就无法访问了。

## Array类型
ECMAScript数组的每一项都可以保存任何类型的数据。
### 创建数组
1. 构造函数法
var colors = new Array(20);
20这个参数表示数组的长度。
也可以直接在Array构造函数中传递包含的项。
var colors = new Array("red","blue","green");
2. 省略new操作符
var colors = Array();
3. 数组字面量表示法
var colors = ["red","blue","green"];

使用数组字面量表示法时，不会调用Array构造函数。（Firebox3及更早除外）

#### length妙用
因为数组的length属性不仅仅是只读的。所以可以通过设置这个属性来从数组末尾移除项或者添加新项。
```
var colors = ["red","blue","green"];
colors.length = 2;
alert(colors[2]); //undefined
colors[colors.length] = "green";
alert(colors[2]); // green;
```


### 检测数组
```
if(value instanceof Array){
	
}
if(Array.isArray(value)){
	
}
```
instanceof  的问题在于，它假定只有一个全局执行环境。如果网页中含有多个框架实际上就存在两个以上的全局执行环境，从而存在两个以上不同版本的Array构造函数。

在ECMAScript5 中新加了Array.isArray(value) 方法。
目前在IE9+ Firebox4 Safari5+ Chrome

### 转换方法 toString()
```
var colors = ["red","blue","green"];
console.log(colors.toString()); // 字符串 red,blue,green
console.log(colors.valueOf()); // 返回colors的数组 
console.log(colors); //  数组
alert(colors);// 字符串red,blue,green
```
用alert的时候会在后台调用toString()方法，得到结果与调用 toString()方法相同。
toLocaleString()方法也会返回和toString()和valueOf()相同的值。但是如果在函数中定义了该方法，就按照该方法返回值。
这3中方法都在默认情况下以逗号分隔的字符串形式返回数组项。
```
colors.join("|"); //使用|分隔符来构建这个字符串, red|blue|green;
```
** 若数组中的某一项值是 null 或者 undefined，则该三种方法返回的结果是以空字符串表示 **

### 栈方法 push() pop()
后进先出LIFO
push()
- 接受任意参数，向数组末尾添加，数组长度对应相加。
pop()
- 移除数组末尾最后一项，并返回该项的值，数组对应长度-1。

### 队列方法 push() shift()
先进先出FIFO——先来排队的先踏上诺亚方舟滚出地球
push()
- 接受任意参数，向数组末尾添加，数组长度对应相加。
shift()
- 取得第一项并移除。

### 反向队列 unshift() pop()
在数组前端插入，在数组后端移除
unshift()
- 在数组前端插入任意项并增加数组长度。
pop()
- 移除数组末尾最后一项，并返回该项的值，数组对应长度-1。

### 重新排序 sort()
sort()方法会调用每个数组项的toString()方法将数组中的值转换为字符串，然后比较字符串如何排序。
```
var values = [0,10,5,1,15,20];
console.log(values.sort());
// 0,1,10,15,20,5
```
我们再加一个比较函数
```
function compare(value1, value2) {
	if(value1 < value2) {
		return -1;
	}else if (value1 > value2) {
		return 1;
	}else {
	return 0;
	}
}
var values = [0,1,5,10,15,20];
console.log(values.sort(compare)); // 0,1,5,10,15,20 
```
对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以直接使用这个简单函数
```
function compare(value1, value2){
	return value2 - value1;
}
```

### 操作方法
#### contact()
用于给数组或字符串拼接，置于原数组末尾。可接受负数。
#### slice()
在原数组基础上截取部分数组创建新的数组。不会影响原数组
如
```
var myNumber = [1,2,3,4,5];
var myNumber2 = myNumber.slice(1,3);
var myNumber3 = myNumber.slice(1);
console.log(myNumber2); // 2,3
console.log(myNumber3); // 2,3,4,5
```
如有负数，则该负数加上数组长度来确定相应位置，如果结束位置小于起始项，则返回空数组。

#### splice() 
- 删除	splice(0,2) 删除前2项;
- 插入	splice(起始位置，0(要删除的项数)，要插入的项);
- 替换	splice(起始位置，要删除的项数，要插入的项) ;删除的项数未必和插入的项数相同

### 位置方法
#### indexOf() 
从数组开头向后查找。
```
var myNumber = [1,2,3,4,5];
console.log(myNumber.indexOf(4,3))
//寻找4，从索引值为3开始找，找到了返回4的索引值
```
#### lastIndexOf()
从数组末尾开始向前查找。
以上两种方法若未找到均会返回 -1；

### 迭代方法
在ECMAScript5为数组定义了5个迭代方法。
每个方法接受两个参数：
- 要在每一项上运行的函数
- 运行该函数的作用域对象——影响this的值（可选参数）
运行的函数含有三个参数
1. 数组项的值 item
2. 该项在数组中的位置 index
3. 数组对象本身

#### every()
- 对数组中的每一项运行给定的函数，如果该函数对每一项都返回true,则返回true;
```
var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.every(function(item, index, array){
  return (item>2);
});
alert(everyResult)  // false;
```
#### filter() 常用
- 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数据;
```
var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.filter(function(item, index, array){
	return (item>2);
});
alert(everyResult)  //  [3,4,5,4,3]
```
#### forEach() 常用
- 对数组中的每一项运行给定函数，这个方法没有返回值；
```
var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.forEach(function(item, index, array){
	//执行某些操作
});
alert(everyResult)  //  [2,4,6,8,10,8,6,4,2]
```
#### map() 常用
- 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组；
```
var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.map(function(item, index, array){
	return (item*2);
});
alert(everyResult)  //  [2,4,6,8,10,8,6,4,2]
```
#### some()
- 对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true	
```
var everyResult = numbers.some(function(item, index, array){
	return (item>2);
});
alert(everyResult)  // true;
```
目前支持浏览器  ie9+,Firefox2+,Safari3+,Opera9.5+，chrome;

### 归并方法
#### reduce() 和 reduceRight()
迭代数组的所有项，构建一个最终返回的值。
参数：
- 一个在每一项上调用的函数
- 作为归并基础的初始值（可选）
传入reduce函数的4个参数
1. 前一个值
2. 当前值
3. 项的索引
4. 数组对象
```
var numbers = [1,2,3,4,5,4,3,2,1];
var sum = numbers.reduce(function(prve,cur,index,array){
  return prve + cur;
});
alert(sum);
```
这种方法有点类似于函数柯里化。

## Date类型
```
var now = new Date();
console.log(now);
//Wed Jul 27 2016 20:50:34 GMT+0800 (中国标准时间)
```
这显然不是我们想要的时间格式。
    var now = new Date();
console.log(now);
//Wed Jul 27 2016 20:50:34 GMT+0800 (中国标准时间)
console.log(now.getFullYear());
console.log(now.getMonth());
//返回的是当前月份数-1（计算机都是从0开始当第一个月的）
console.log(now.getDate());
//返回当前月份中的第几天
console.log(now.getDay());
//返回星期几（注意0是星期天）
console.log(now.getHours());
console.log(now.getMinutes());
console.log(now.getSeconds());
console.log(now.getTime());
//应该是从1970年1月1日0点到现在的毫秒
//返回日期的毫秒数
### date获取代码运行时间
```
var start = Date.now();
//doSomething();
var stop = Date.now(),
	result = stop - start; // 返回毫秒数
```
### 有待补充的点
1. 解决日期和月份以及时间少个0的问题

## RegExp 类型 (书中有误？)
### 语法
var expression = / pattern / flags ;
flag:
- g:全局模式
- i:不区分大小写
- m:多行模式

1. 字面量形式表示法
```
var pattern =  /[bc]at/i
```
2. 构造函数表示法
```
var pattern = new RegExp("[bc]at","i");
```
### 正则表达式字面量与构造函数表达式的差异
使用正则表达式字面量始终都是会共享同一个RegExp实例,而使用构造函数每次创建的新的RegExp实例都是一个新实例。
```
var re = null,i;
  for(i=0; i < 10; i++){
    re = /cat/g;
    re.test("catastrophe");
  }
```
以上是书上提供的例子，我在循环中console.log(re.test("catastrophe"))，但实际上每次都返回的是true。
```
var re = null,i;
  for(i=0; i < 10; i++){
    re = /cat/g;
    re.test("catastrophe");
  }
```
```
var re = null,i;
  for(i=0; i < 10; i++){
    re = new RegExp("cat", "g");
    console.log(re.test("catastrophe"));
  }
```
返回结果是一样的的，都是返回10个true。

### 正则实例方法
#### exec()
这个不常用，碰到了再补充

正则表达式中的valueOf()会返回正则表达式本身。
toString() 以及 toLocaleString() 会返回正则表达式的字面量。
var pattern = new RegExp("\\[bc\\]at","gi")
console.log(pattern.toString());///\[bc\]at/gi
console.log(pattern.toLocaleString()); // /\[bc\]at/gi

## Function类型
补充：参考函数进阶

函数名仅仅是指向函数的指针，因此函数名与包含对象指针的其他变量没什么不同。即：一个函数可能有多个名字。
```
function sum(num1, num2){
    return num1 + num2;
}
alert(sum(10,10)); //20
var anotherSum = sum;
alert(anotherSum(10,10));//20
sum = null;
alert(anotherSum(10,10));//20
```
可以理解为：在栈中有两个函数名分别是sum和anotherSum，他们指向同一个堆内存（即该运行函数），即使设置sum为null,anotherSum依然指向该运行函数。
把函数名理解为指针，也就明白什么没有函数重载了！

### 函数声明与函数表达式
解析器在执行环境中加载数据时，会率先读取函数声明，并使其在执行任何代码之前都可以用;至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真的被执行。
```
alert(sum(10, 10));
function sum(num1, num2) {
	return sum1 + sum2;
}
```
解析器通过函数声明提升的过程，读取并将函数声明添加到执行环境，因此上述代码可以正常运行。
对代码求值时，JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部。

但是像下面的代码就会出现错误
```
alert(10, 10);
var sum = function(num1, num2) {
	return num1 + num2;
}
```
### 作为值的函数
ECMAScript中函数名本身就是变量，所以函数也可以作为值来使用。
注意，当函数名作为参数的时候，不要加圆括号！

假设有一个对象数组，我们需要根据某个对象属性进行排序。而传递给数组sort()的比较函数要接受两个参数，即要比较他们的值。
但是我们需要一种方式来指明按照哪个属性来排序。
要解决这个问题，可以定义一个函数：
** 它接受一个属性名，然后根据该属性名来创建一个比较函数。 **
```
function createComparisonFunction(propertyName) {
	return function(object1, object2) {
	var value1 = object1[propertyName];
	var value2 = object2[propertyName];

	if (value1 < value2) {
		return -1;
	} else if (value1 > value2){
		return 1;
	} else {
		return 0;
	}
	};
}
var data = [{name: "Zaynex" ,age: 26},{name: "Nicholas", age:30}];
data.sort(createComparisonFunction("name"));  // Nicholas
alert(data[0].name);
data.sort(createComparisonFunction("age")); // 26
alert(data[0].age);
```
这段代码返回的是在函数中嵌套了另一个函数，而且内部函数前面加了return 操作符。在内部函数接受到propertyName参数后，它会使用方括号表示法取得给定属性的值。

### 函数内部属性
函数内部有两个特殊的对象： this 和 arguments。
虽然arguments的主要用途是保存函数参数，但这个对象还有一个叫callee的属性，该属性是一个指针，指向arguments对象的函数。
```
function factorial(num){
	if(num < 1){
		return 1;
	}else {
		return num * factorial(num-1);
	}
}
```
此时函数名和执行函数名紧紧耦合在一起，为了消除耦合现象，我们可以使用arguments.callee。
```
function factorial(num){
	if(num < 1){
		return 1;
	}else {
		return num * arguments.callee(num-1);
	}
}
var trueFactorial = factorial;

factorial = function() {
	return 0;
};
alert(trueFactorial(5));  //120 		使用arguments.callee后不会受到原函数名影响
alert(factorial(5));    //0 
```
如果不这么做的话，你回头看看Function这节开头，看看刚才这段函数会发生什么。

### caller
该属性保存着调用当前函数的函数的引用，返回的是整串代码
```
function outer(){
  inner();
}
function inner(){
  alert(inner.caller);
}
outer();
//function outer(){inner();}
```

### 函数属性和方法

属性：length\prototype
prototype保存了所有实例方法，不可枚举。因此for-in是无法发现的。

** 对于ECMAScript中的引用类型而言，peopertype保存的是它们所有实例方法的真正所在。toString()和valueOf()等方法都在它名下，只不过是通过各自的对象的实例访问罢了。 **
#### apply()
每个函数内部都包含这2个方法。它们的用途是在特定的作用于中调用函数，实际上就是设置函数体内this对象的值。

apply()每个方法接受两个参数：
1. 在其中运行函数的作用域
2. 参数数组，可以是Array的实例，也可以是arguments对象
```
function  sum(num1, num2) {
	return num1 + num2;
}
function callSum1(num1, num2) {
	return sum.apply(this, arguments);
}
function callSum2(num1, num2) {
	return sum.apply(this, [num1, num2]);
}
alert(callSum1(10, 10));
alert(callSum2(10, 10));
```
上述代码中，callSum()在执行sum()函数时传入了this 作为 this值。（因为是在全局作用域中调用的，所以传入的是window对象）和arguments对象。

在严格模式下， 未指定环境对象而调用函数，则this值不会会转化为window,除非明确把函数添加到某个对象或者调用call()或apply()，否则this值将是undefined。
#### call()
call()作用和apply()相同，只是call的第二个参数要全都写出来。apply()就可以直接传数组。

#### 扩充函数作用域
- apply()和call()强大的地方在于扩充作用域。
我们先来看这个例子
```
window.color = "red";
var o = {color: "blue" };

function sayColor(){
	alert(this.color);
}

sayColor();    //red
sayColor.call(this) ;   //red
sayColor.call(window);  //red
sayColor.call(o);  //blue
```
运行到sayColor.call(o)时函数执行环境不一样了，因此此时this指向了o，于是显示的是 o中的color属性。
不理解的话，咱们来还原下这段代码
```
window.color = "red";
var o = {color: "blue" };

function sayColor(){
	alert(this.color); // 
}
sayColor();    //red
sayColor.call(this) ;   //red 此时this指向全局变量的window
sayColor.call(window);  //red 此时this指向全局变量的window
o.sayColor = sayColor;
o.sayColor(); // blue 此时this指向o
```

使用call()和apply()的好处就是对象不需要与方法有任何耦合关系。
此外，我们还有bind方法

#### bind()方法
该方法，会创建一个函数的实例，其this值会被绑定传到bind()函数的值。
```
window.color = "red";
var o = {color: "blue" };

function sayColor(){
  alert(this.color); // 
}
var objectSayColor = sayColor.bind(o);
objectSayColor();
```